#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'queensAttack' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER n
#  2. INTEGER k
#  3. INTEGER r_q
#  4. INTEGER c_q
#  5. 2D_INTEGER_ARRAY obstacles
#
def down(n, r, c, obs, ans):
    for i in range (r-1, 0, -1):
        if [i, c] in obs:
            break
        else:
            ans += 1
    return ans

def up(n, r, c, obs, ans):
    for i in range(r+1, n+1, 1):
        if [i, c] in obs:
            break
        else:
            ans+=1
    return ans

def right(n, r, c, obs, ans):
    for j in range(c+1, n+1, 1):
        if [r, j] in obs:
            break
        else:
            ans+=1
    return ans

def left(n, r, c, obs, ans):
    for j in range(c-1, 0, -1):
        if [r,j] in obs:
            break
        else:
            ans+=1
    return ans

def left_up(n, r, c, obs, ans):
    i = r+1
    j = c-1
    while ((i <= n) and (j>0)):
        if [i,j] in obs:
            break
        else:
            ans+=1
        i+=1
        j-=1
    return ans

def left_down(n, r, c, obs, ans):
    i = r-1
    j = c-1
    while ((i >0) and (j >0)):
        if [i,j] in obs:
            break
        else:
            ans+=1
        i-=1
        j-=1
    return ans

def right_down(n, r, c, obs, ans):
    i = r-1
    j = c+1   
    while ((i >0) and (j <=n)):
        if [i,j] in obs:
            break
        else:
            ans+=1
        i-=1
        j+=1
    return ans

def right_up(n, r, c, obs, ans):
    i = r+1
    j = c+1
    while ((i <=n ) and (j <=n)):
        if [i,j] in obs:
            break
        else:
            ans+=1
        i+=1
        j+=1
    return ans  

def queensAttack(n, k, r_q, c_q, obstacles):
    # Write your code here
    ans = 0
    r = r_q
    c = c_q
    obs = obstacles
    ans = down(n, r, c, obs, ans)
    ans = up(n, r, c, obs, ans)
    ans = left(n, r, c, obs, ans)
    ans = right(n, r, c, obs, ans)
    ans = right_up(n, r, c, obs, ans)
    ans = right_down(n, r, c, obs, ans)
    ans = left_down(n, r, c, obs, ans)
    ans = left_up(n, r, c, obs, ans)
    return ans
    
    
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    k = int(first_multiple_input[1])

    second_multiple_input = input().rstrip().split()

    r_q = int(second_multiple_input[0])

    c_q = int(second_multiple_input[1])

    obstacles = []

    for _ in range(k):
        obstacles.append(list(map(int, input().rstrip().split())))

    result = queensAttack(n, k, r_q, c_q, obstacles)

    fptr.write(str(result) + '\n')

    fptr.close()
